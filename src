import cv2
import numpy as np
import time
from matplotlib.colors as plt 
from matplotlib.ticker import MaxNLocator

def find_center_of_shape(image):
    # 이미지를 그레이스케일로 변환
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # 가우시안 블러를 사용하여 이미지를 부드럽게 만든다.
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Canny 엣지 검출을 사용하여 이미지의 엣지를 찾는다.
    edges = cv2.Canny(blurred, 50, 150)

    # 윤곽선 찾기
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        # 윤곽선의 면적 계산
        area = cv2.contourArea(contour)

        # 면적이 일정 크기 이상인 경우에만 처리 (원의 경우 원이라고 판단)
        if area > 100:
            # 윤곽선을 감싸는 최소한의 사각형을 구함
            rect = cv2.minAreaRect(contour)
            center = tuple(map(int, rect[0]))  # 중심 좌표 추출
        if contour == 
            # 중심 좌표에 점을 그리기
            cv2.circle(image, center, 5, (0, 255, 0), -1)

            # 이미지에 사각형 그리기 (선택 사항)
            box = cv2.boxPoints(rect)
            box = np.int0(box)
            cv2.drawContours(image, [box], 0, (0, 0, 255), 2)

    return image

def HSV(image):
    frame = image.copy()
 
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    
    h, s, v = cv2.split(hsv_frame)

    lower_red = cv2.inRange(hsv_frame, (0, 60, 80), (11, 255, 255))
    upper_red = cv2.inRange(hsv_frame, (160, 60, 100), (180, 255, 255))

    orange = cv2.inRange(hsv_frame, (11, 60, 80), (30, 255, 255))

    lower_green = cv2.inRange(hsv_frame, (40, 50, 50), (100, 255, 255))
    upper_green = cv2.inRange(hsv_frame, (0, 50, 20), (5, 255, 50))
    # light_green = cv2.inRange(hsv_frame, (40, 75, 80), (60, 255, 255))

    added_red = cv2.addWeighted(lower_red, 1.0, upper_red, 1.0, 0.0)
    added_green = cv2.addWeighted(lower_green, 1.0, upper_green, 1.0, 0.0)

    red = cv2.bitwise_and(hsv_frame, hsv_frame, mask=added_red)
    red = cv2.cvtColor(red, cv2.COLOR_HSV2BGR)
    
    orange = cv2.bitwise_and(hsv_frame, hsv_frame, mask=orange)
    orange = cv2.cvtColor(orange, cv2.COLOR_HSV2BGR)

    green = cv2.bitwise_and(hsv_frame, hsv_frame, mask=added_green)
    green = cv2.cvtColor(green, cv2.COLOR_HSV2BGR)

    # light_green = cv2.bitwise_and(hsv_frame, hsv_frame, mask=light_green)
    # light_green = cv2.cvtColor(green, cv2.COLOR_HSV2BGR)

    return red, orange, green


# 웹캠 
cap = cv2.VideoCapture(0)  

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # 도형 중심 찾기 함수 호출
    result_frame = find_center_of_shape(frame)

    # 화면에 이미지 출력
    cv2.imshow("Frame", result_frame)

    # 'q' 키를 누르면 종료
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# 작업 완료 후 해제
cap.release()
cv2.destroyAllWindows()



